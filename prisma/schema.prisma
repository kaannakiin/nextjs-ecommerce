generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  USER
  ADMIN
}

enum Currency {
  TRY
  USD
  EUR
}

enum Locale {
  TR
  EN
  DE
}

enum AssetType {
  IMAGE
  VIDEO
  DOCUMENT
}

enum VariantType {
  CHOICE
  COLOR
}

enum ProductType {
  PHYSICAL
  DIGITAL
}

model User {
  id        String   @id @default(cuid())
  name      String
  surname   String
  email     String?  @unique
  phone     String?  @unique
  password  String?
  image     String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email], name: "idx_users_email")
  @@index([phone], name: "idx_users_phone")
}

model Asset {
  id   String    @id @default(cuid())
  type AssetType @default(IMAGE)
  url  String    @unique

  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  productAsset  ProductAsset[]
  category      Category[]
  brand         ProductBrand[]
  variantOption VariantOption[]
  variantImages ProductVariantImage[]

  @@index([url])
}

model ProductAsset {
  id String @id @default(cuid())

  order     Int     @default(0)
  productId String
  assetId   String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  asset     Asset   @relation(fields: [assetId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, assetId])
  @@unique([productId, order])
  @@index([productId, order])
}

model ProductVariantImage {
  id String @id @default(cuid())

  order Int @default(0)

  combinationId String
  combination   ProductVariantCombination @relation(fields: [combinationId], references: [id], onDelete: Cascade)

  assetId String
  asset   Asset  @relation(fields: [assetId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([combinationId, assetId])
  @@unique([combinationId, order])
  @@index([combinationId])
}

model TaxonomyCategory {
  id       String @id @default(cuid())
  googleId String @unique

  parentId String?
  parent   TaxonomyCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children TaxonomyCategory[] @relation("CategoryHierarchy")

  path      String?
  pathNames String?
  depth     Int     @default(0)

  originalName String
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  products Product[]

  @@index([googleId])
  @@index([parentId])
  @@index([path])
  @@index([depth])
  @@index([isActive])
}

model CategoryTranslation {
  id              String   @id @default(cuid())
  locale          Locale   @default(TR)
  categoryId      String
  category        Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  name            String
  slug            String
  description     String?  @db.Text
  metaTitle       String?
  metaDescription String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([locale, categoryId])
  @@unique([locale, slug])
  @@index([slug])
}

model Category {
  id String @id @default(cuid())

  imageId String?
  image   Asset?  @relation(fields: [imageId], references: [id], onDelete: SetNull)

  parentCategoryId String?
  parentCategory   Category?  @relation("CategoryHierarchy", fields: [parentCategoryId], references: [id])
  childCategories  Category[] @relation("CategoryHierarchy")

  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  translations CategoryTranslation[]

  products ProductCategory[]

  @@index([parentCategoryId])
}

model ProductCategory {
  id         String   @id @default(cuid())
  productId  String
  categoryId String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, categoryId])
  @@index([productId])
  @@index([categoryId])
}

// Basit ürün fiyatları (sadece basit ürünler için)
model ProductPrices {
  id       String   @id @default(cuid())
  currency Currency @default(TRY)

  price           Float
  discountedPrice Float?
  buyedPrice      Float? // Satın alınan fiyat

  Product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([currency, productId])
  @@index([productId])
}

// Kombinasyon fiyatları (variant ürünler için)
model ProductVariantCombinationPrice {
  id       String   @id @default(cuid())
  currency Currency @default(TRY)

  price           Float
  discountedPrice Float?
  buyedPrice      Float? // Satın alınan fiyat

  combination   ProductVariantCombination @relation(fields: [combinationId], references: [id], onDelete: Cascade)
  combinationId String
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt

  @@unique([currency, combinationId])
  @@index([combinationId])
}

model ProductTranslation {
  id     String @id @default(cuid())
  locale Locale @default(TR)
  name   String
  slug   String

  description      String? @db.Text
  shortDescription String? @db.Text
  metaTitle        String?
  metaDescription  String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  @@unique([locale, productId])
  @@unique([locale, slug])
  @@index([slug])
  @@index([productId])
}

// Kombinasyon çevirileri (variant ürünler için)
model ProductVariantCombinationTranslation {
  id     String @id @default(cuid())
  locale Locale @default(TR)

  description      String? @db.Text
  shortDescription String? @db.Text
  metaTitle        String?
  metaDescription  String? @db.Text

  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt
  combination   ProductVariantCombination @relation(fields: [combinationId], references: [id], onDelete: Cascade)
  combinationId String

  @@unique([locale, combinationId])
  @@index([combinationId])
}

model Product {
  id   String      @id @default(cuid())
  type ProductType @default(PHYSICAL)

  // Sadece basit ürünler için fiyat ve çeviri
  prices       ProductPrices[]
  translations ProductTranslation[]
  categories   ProductCategory[]

  taxonomyCategory   TaxonomyCategory? @relation(fields: [taxonomyCategoryId], references: [id])
  taxonomyCategoryId String?
  brand              ProductBrand?     @relation(fields: [brandId], references: [id], onDelete: SetNull)
  brandId            String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  assets             ProductAsset[]

  // Variant ürünler için
  variantCombinations  ProductVariantCombination[]
  productVariantGroups ProductVariantGroup[]

  @@index([createdAt])
  @@index([taxonomyCategoryId])
}

model ProductBrandTranslation {
  id              String       @id @default(cuid())
  locale          Locale       @default(TR)
  name            String
  slug            String
  description     String?      @db.Text
  metaTitle       String?
  metaDescription String?      @db.Text
  brandId         String
  brand           ProductBrand @relation(fields: [brandId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([locale, brandId])
  @@unique([locale, slug])
  @@index([slug])
  @@index([brandId])
}

model ProductBrand {
  id            String                    @id @default(cuid())
  imageId       String?
  image         Asset?                    @relation(fields: [imageId], references: [id], onDelete: SetNull)
  translations  ProductBrandTranslation[]
  parentBrandId String?
  parentBrand   ProductBrand?             @relation("BrandHierarchy", fields: [parentBrandId], references: [id])
  childBrands   ProductBrand[]            @relation("BrandHierarchy")
  products      Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VariantOptionTranslation {
  id     String @id @default(cuid())
  locale Locale @default(TR)
  name   String
  slug   String

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  variantOption   VariantOption @relation(fields: [variantOptionId], references: [id], onDelete: Cascade)
  variantOptionId String

  @@unique([locale, variantOptionId])
  @@unique([locale, slug])
  @@index([slug])
  @@index([variantOptionId])
  @@index([locale, variantOptionId])
}

model VariantOption {
  id           String                     @id @default(cuid())
  translations VariantOptionTranslation[]

  value    String // "red", "L", "XXL" gibi sistem değeri
  colorHex String? // Renk için hex kodu

  variantId String
  variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  imageId String?
  image   Asset?  @relation(fields: [imageId], references: [id], onDelete: SetNull)

  // Hangi ürün gruplarında kullanılıyor
  productVariantGroups ProductVariantGroupOption[]

  // Hangi kombinasyonlarda kullanılıyor
  combinations ProductVariantCombinationOption[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([variantId, value])
  @@index([variantId])
}

model VariantTranslation {
  id     String @id @default(cuid())
  locale Locale @default(TR)
  name   String
  slug   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  variant   Variant  @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId String

  @@unique([locale, variantId])
  @@unique([locale, slug])
}

model Variant {
  id   String      @id @default(cuid())
  type VariantType @default(CHOICE)

  translations        VariantTranslation[]
  options             VariantOption[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  variantProductGroup ProductVariantGroup[]
}

model ProductVariantGroup {
  id    String @id @default(cuid())
  order Int    @default(0)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  variantId String
  variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  // Bu ürün için hangi seçenekler kullanılabilir
  availableOptions ProductVariantGroupOption[]

  // Bu grup hangi kombinasyonlarda kullanılıyor
  combinations ProductVariantCombinationOption[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, variantId])
  @@index([productId])
  @@index([variantId])
}

model ProductVariantGroupOption {
  id        String @id @default(cuid())
  sortOrder Int    @default(0)

  productVariantGroupId String
  productVariantGroup   ProductVariantGroup @relation(fields: [productVariantGroupId], references: [id], onDelete: Cascade)

  variantOptionId String
  variantOption   VariantOption @relation(fields: [variantOptionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productVariantGroupId, variantOptionId])
  @@index([productVariantGroupId, sortOrder])
  @@index([productVariantGroupId])
  @@index([variantOptionId])
}

model ProductVariantCombinationOption {
  id String @id @default(cuid())

  combinationId String
  combination   ProductVariantCombination @relation(fields: [combinationId], references: [id], onDelete: Cascade)

  // Hangi variant group'tan
  productVariantGroupId String
  productVariantGroup   ProductVariantGroup @relation(fields: [productVariantGroupId], references: [id], onDelete: Cascade)

  // Hangi option seçili
  variantOptionId String
  variantOption   VariantOption @relation(fields: [variantOptionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Her kombinasyonda, her variant group'tan sadece 1 option seçilebilir
  @@unique([combinationId, productVariantGroupId])
  @@index([combinationId])
  @@index([variantOptionId])
  @@index([productVariantGroupId])
}

model ProductVariantCombination {
  id String @id @default(cuid())

  // Ana ürün
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  // Bu kombinasyonun SKU'su
  sku String @unique

  // Stok bilgisi
  stock   Int     @default(0)
  barcode String? @unique

  // Bu kombinasyondaki variant option'lar
  variantOptions ProductVariantCombinationOption[]

  // Kombinasyon için özel resimler
  images ProductVariantImage[]

  // Kombinasyon için fiyat ve çeviri bilgileri
  prices       ProductVariantCombinationPrice[]
  translations ProductVariantCombinationTranslation[]

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([sku])
  @@index([isActive])
}
